@page "/importCSV"
@inject ToastService toastService

<h3>Import CSV</h3>

@if (form == null)
{
    <p>Generating form...</p>
}
else
{
    <div class="space50"></div>

    <h4>CSV to import</h4>
    <div class="form-group-sm">
        <textarea rows="4" @bind="@ImportCSV" class="form-control" style="width: 100%;"></textarea>
    </div>

    <div style="width: 100%; margin-top: 25px; text-align: right;">
        <button @onclick="@ImportCSVText">Import</button>
    </div>

    <br />

    <h4>Output</h4>
    <hr />
    <div class="form-group-sm">
        <textarea rows="4" value="@OutputCSV" class="form-control" style="width: 100%;" readonly></textarea>
    </div>

    <div class="space50"></div>

    <h4>Test form</h4>
    <hr />
    <Survey Form="form" ShowDebug="true" OnFormValuesChanged="OnFormValuesChanges"
            OnFormSubmitted="OnFormSubmitted" OnFormSubmittedError="OnFormSubmittedError"
            UseNamingComvention="false" />
}

<Collapsable Title="CSV Template" Collapsed="true" Value="">
    @((MarkupString)CSVTemplate)
</Collapsable>

<div class="space50"></div>

@code {
    Form? form;
    string? CSVTemplate;

    CSVImport? CSVImport;
    string? ImportCSV { get; set; }
    string? OutputCSV { get; set; }

    CSVGenerator csv = new CSVGenerator();

    protected override async Task OnInitializedAsync()
    {
        form = new Form()
        {
            Elements = new List<IElement>()
            {
                new Checkbox() {
                    Title = "My first checkbox",
                    Choices = new List<object>()
                    {
                        new CheckboxChoice() { Label = "Check this one" },
                        new CheckboxChoice() { Label = "Check also this one" },
                        new CheckboxChoice() { Label = "And this one" },
                        new CheckboxChoice() { Label = "Maybe this one" },
                    }
                },
                new Textbox() { Title = "First name (insert 1 to test the filters)", PlaceHolder = "Enter your name", Name = "txt1", IsRequired = true },
                new Textbox() { Title = "Middle name", PlaceHolder = "Enter your middle name", Name = "txt2",
                    Description = "Insert your middle name", VisibleIf = "txt1 = '1'" },
                new Textbox() { Title = "Last name", PlaceHolder = "Enter your last name", Name = "txt3",
                    Description = "Insert your last name", IsRequired = true },
                new Textbox() { Title = "Text for test", PlaceHolder = "Enter a word", Name = "txt_4",
                    Description = "Random text test", IsRequired = true },
                new Radiobutton() { Title = "This is a radiobutton", Description = "Select one of the following options",
                    Name = "rdb1", Choices = new List<object>() {
                        "One", "Two", "Three",
                        new RadiobuttonChoice() { Label = "Four", VisibleIf = "txt1 = '1'" }
                    }, IsRequired = true },
                new Radiobutton() { Title = "This is a second radiobutton", Description = "Select one of the following options",
                    Name = "rdb2", Choices = new List<object>() {
                        "21", "22", "23",
                        new RadiobuttonChoice() { Label = "24", VisibleIf = "txt1 = '1'" }
                    }, IsRequired = true, Orientation = PSC.Survey.Shared.Enums.Orientation.Horizontal },
                new Radiobutton() { Title = "This is a second radiobutton", Description = "Select one of the following options",
                    Name = "rdb3", Choices = new List<object>() {
                        "31", "32", "33",
                        new RadiobuttonChoice() { Label = "34", VisibleIf = "txt1 = '1'" }
                    }, IsRequired = true,
                    Orientation = PSC.Survey.Shared.Enums.Orientation.Horizontal,
                    Theme = PSC.Survey.Shared.Enums.RadioTheme.Boxed },
                new Panel() {
                    Name="pnl1",
                    Title = "This is a panel",
                    Description = "Panel example that conains other elements",
                    PanelElements = new List<IElement>()
                    {
                        new Textbox() { Title = "Username", PlaceHolder = "Enter your new name", Name = "txtNewName",
                            Description = "Insert your new name", IsRequired = true },
                        new Textbox() {
                            Title = "Password", PlaceHolder = "Enter your password", Name = "txtPassword", IsRequired = true,
                            TextboxType = PSC.Survey.Shared.Enums.TextboxType.Password
                        },
                        new LikertSkill() { Name = "lsk1", Title = "Liker Skill", LikertSkirtType = PSC.Survey.Shared.Enums.LikertSkillType.Agree }
                    }
                },
                new Slider() {
                    Name = "sld1",
                    Title = "Slider",
                    Description = "This is an example of a slider",
                    MinValue = 1,
                    MaxValue = 11,
                    IsVisible = true,
                    Choices = new List<SliderChoice>()
                    {
                        new SliderChoice() { Value = 1, Label = "One" },
                        new SliderChoice() { Value = 6, Label = "Six" },
                        new SliderChoice() { Value = 11, Label = "Eleven" }
                    }
                },
                new DropdownList()
                {
                    Title = "This is a dropdown list",
                    Choices = new List<object>()
                    {
                        "First option",
                        new DropdownListChoice()
                        {
                                Value = "Second",
                                Label = "Second option"
                        },
                        "Third option"
                    }
                },
                new Switch()
                {
                    Title = "This is a switch",
                    Description = "On and off"
                }
            }
        };
    }


    private void OnFormValuesChanges()
    {
        CSVTemplate = csv.GetColumnsTemplate(form);
    }

    private async Task OnFormSubmitted(FormSubmittedEventArgs e)
    {
        CSVTemplate = csv.GetCSV(form.Elements, e.RawValues).Replace("\n", "<br>");

        toastService.ShowToast("Form valid! The result Json and CSV are created.", Enums.ToastLevel.Success);
    }

    private async Task OnFormSubmittedError()
    {
        toastService.ShowToast("Form is not valid! Check the form to see the errors.", Enums.ToastLevel.Error);
    }

    private async Task ImportCSVText()
    {
        if (string.IsNullOrEmpty(ImportCSV))
        {
            toastService.ShowToast("The CSV to import musn't be empty!", Enums.ToastLevel.Error);
            return;
        }

        CSVImport = new CSVImport();
        ImportReturn rtnImport = CSVImport.ImportData(ImportCSV, form);

        if(rtnImport.IsValid)
        {
            OutputCSV = "";
            foreach (var item in rtnImport.DataRows)
                OutputCSV += item.Json + Environment.NewLine + Environment.NewLine;

            toastService.ShowToast("CSV is valid! Please see the output.", Enums.ToastLevel.Success);
        }
        else
        {
            OutputCSV = ((MarkupString)string.Join(Environment.NewLine, rtnImport.Errors)).Value;

            toastService.ShowToast("The CSV is not in the correct format. Please see the output.", Enums.ToastLevel.Error);
        }
    }
}